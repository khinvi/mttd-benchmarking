"""
Core data types and models for the MTTD Benchmarking Framework.
"""

from dataclasses import dataclass, field
from datetime import datetime
from enum import Enum
from typing import Dict, List, Optional, Any, Union


class CloudProvider(str, Enum):
    """Supported cloud providers."""
    AWS = "aws"
    AZURE = "azure"
    GCP = "gcp"


class TechniqueCategory(str, Enum):
    """Categories of attack techniques."""
    INITIAL_ACCESS = "initial_access"
    EXECUTION = "execution"
    PERSISTENCE = "persistence"
    PRIVILEGE_ESCALATION = "privilege_escalation"
    DEFENSE_EVASION = "defense_evasion"
    CREDENTIAL_ACCESS = "credential_access"
    DISCOVERY = "discovery"
    LATERAL_MOVEMENT = "lateral_movement"
    COLLECTION = "collection"
    EXFILTRATION = "exfiltration"
    COMMAND_AND_CONTROL = "command_and_control"
    IMPACT = "impact"


class DetectionSeverity(str, Enum):
    """Severity levels for detection events."""
    CRITICAL = "critical"
    HIGH = "high"
    MEDIUM = "medium"
    LOW = "low"
    INFORMATIONAL = "informational"


class ResourceType(str, Enum):
    """Types of cloud resources that can be created/manipulated."""
    # AWS Resources
    EC2_INSTANCE = "ec2_instance"
    S3_BUCKET = "s3_bucket"
    IAM_ROLE = "iam_role"
    IAM_USER = "iam_user"
    LAMBDA_FUNCTION = "lambda_function"
    CLOUDTRAIL = "cloudtrail"
    CLOUDWATCH_ALARM = "cloudwatch_alarm"
    
    # Azure Resources
    VM = "virtual_machine"
    STORAGE_ACCOUNT = "storage_account"
    MANAGED_IDENTITY = "managed_identity"
    APP_SERVICE = "app_service"
    LOGIC_APP = "logic_app"
    
    # GCP Resources
    COMPUTE_INSTANCE = "compute_instance"
    STORAGE_BUCKET = "storage_bucket"
    IAM_SERVICE_ACCOUNT = "iam_service_account"
    CLOUD_FUNCTION = "cloud_function"
    
    # Generic
    GENERIC = "generic_resource"


@dataclass
class CloudPlatform:
    """Represents a cloud platform configuration."""
    provider: CloudProvider
    service_name: str
    region: str
    config: Dict[str, Any] = field(default_factory=dict)


@dataclass
class ResourceConfig:
    """Configuration for a cloud resource."""
    type: ResourceType
    name: Optional[str] = None
    parameters: Dict[str, Any] = field(default_factory=dict)


@dataclass
class AttackStep:
    """Single step in an attack scenario."""
    name: str
    technique_id: str  # MITRE ATT&CK technique ID
    description: Optional[str] = None
    category: Optional[TechniqueCategory] = None
    parameters: Dict[str, Any] = field(default_factory=dict)
    expected_indicators: List[str] = field(default_factory=list)
    
    def __post_init__(self):
        """Set category based on technique ID if not provided."""
        if not self.category:
            # Map MITRE technique IDs to categories (simplified)
            technique_categories = {
                "T1078": TechniqueCategory.INITIAL_ACCESS,  # Valid Accounts
                "T1087": TechniqueCategory.DISCOVERY,       # Account Discovery
                "T1098": TechniqueCategory.PERSISTENCE,     # Account Manipulation
                "T1136": TechniqueCategory.PERSISTENCE,     # Create Account
                "T1530": TechniqueCategory.COLLECTION       # Data from Cloud Storage
            }
            
            if self.technique_id in technique_categories:
                self.category = technique_categories[self.technique_id]
            else:
                # Default to discovery if unknown
                self.category = TechniqueCategory.DISCOVERY


@dataclass
class ExpectedAlert:
    """Alert expected to be generated by a security service."""
    service: str
    finding_type: str
    severity: DetectionSeverity
    time_to_detect_range: List[int]  # [min, max] in seconds


@dataclass
class ThreatScenario:
    """Complete threat scenario to be simulated."""
    id: str
    name: str
    description: str
    platform: CloudPlatform
    steps: List[AttackStep]
    resources: List[ResourceConfig] = field(default_factory=list)
    expected_alerts: List[ExpectedAlert] = field(default_factory=list)
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> "ThreatScenario":
        """Create a ThreatScenario from a dictionary."""
        platform_data = data.get("platform", {})
        platform = CloudPlatform(
            provider=CloudProvider(platform_data.get("name", "aws")),
            service_name=platform_data.get("service_name", "unknown"),
            region=platform_data.get("region", "us-west-2"),
            config=platform_data.get("config", {})
        )
        
        # Parse steps
        steps = []
        for step_data in data.get("steps", []):
            steps.append(AttackStep(
                name=step_data.get("name", "Unknown Step"),
                technique_id=step_data.get("technique_id", ""),
                description=step_data.get("description"),
                parameters=step_data.get("parameters", {}),
                expected_indicators=step_data.get("expected_indicators", [])
            ))
        
        # Parse resources
        resources = []
        for resource_type, resource_configs in data.get("environment_config", {}).get("resources", {}).items():
            for config in resource_configs:
                resources.append(ResourceConfig(
                    type=ResourceType(resource_type),
                    parameters=config
                ))
        
        # Parse expected alerts
        expected_alerts = []
        for alert_data in data.get("expected_alerts", []):
            expected_alerts.append(ExpectedAlert(
                service=alert_data.get("service", ""),
                finding_type=alert_data.get("finding_type", ""),
                severity=DetectionSeverity(alert_data.get("severity", "MEDIUM").lower()),
                time_to_detect_range=alert_data.get("time_to_detect_range", [0, 3600])
            ))
        
        return cls(
            id=data.get("id", ""),
            name=data.get("name", "Unknown Scenario"),
            description=data.get("description", ""),
            platform=platform,
            steps=steps,
            resources=resources,
            expected_alerts=expected_alerts
        )


@dataclass
class SimulationResult:
    """Results of a threat simulation."""
    simulation_id: str
    scenario_id: str
    start_time: datetime
    execution_steps: List[Dict[str, Any]] = field(default_factory=list)
    indicators: List[Dict[str, Any]] = field(default_factory=list)
    resources_created: List[Dict[str, Any]] = field(default_factory=list)
    status: str = "initializing"
    end_time: Optional[datetime] = None
    preparation_time: Optional[datetime] = None
    cleanup_time: Optional[datetime] = None
    error: Optional[str] = None
    cleanup_error: Optional[str] = None


@dataclass
class DetectionEvent:
    """A security detection event from a monitoring service."""
    event_id: str
    simulation_id: str
    service_name: str
    detection_time: datetime
    event_type: str
    severity: DetectionSeverity
    related_indicators: List[str] = field(default_factory=list)
    raw_event: Dict[str, Any] = field(default_factory=dict)
    is_false_positive: bool = False


@dataclass
class IndicatorMatch:
    """Match between a simulated attack indicator and a detection event."""
    indicator_id: str
    event_id: str
    simulation_id: str
    indicator_time: datetime
    detection_time: datetime
    
    @property
    def time_to_detect(self) -> float:
        """Calculate time to detect in seconds."""
        return (self.detection_time - self.indicator_time).total_seconds()


@dataclass
class MetricsResult:
    """Results of metrics calculation for a simulation."""
    metrics_id: str
    simulation_id: str
    scenario_id: str
    service_name: str
    calculation_time: datetime
    mttd: float = -1.0  # Mean Time To Detect in seconds, -1 if no detection
    detection_rate: float = 0.0  # Fraction of indicators detected (0.0-1.0)
    false_positives: int = 0  # Number of false positive detections
    severity_distribution: Dict[str, int] = field(default_factory=dict)  # Distribution by severity
    technique_detection_times: Dict[str, float] = field(default_factory=dict)  # By technique
    indicator_detection_times: Dict[str, float] = field(default_factory=dict)  # By indicator
    alerts_matched: List[str] = field(default_factory=list)  # List of matched alert IDs
    alerts_missed: List[str] = field(default_factory=list)  # List of missed expected alerts


@dataclass
class BenchmarkReport:
    """Comparative benchmark report across services."""
    report_id: str
    generation_time: datetime
    service_comparison: Dict[str, Dict[str, Any]]  # Metrics by service
    scenario_results: Dict[str, Dict[str, Any]]  # Results by scenario
    service_details: Dict[str, Dict[str, Any]]  # Details about services
    raw_metrics: List[MetricsResult] = field(default_factory=list)  # Raw metrics data